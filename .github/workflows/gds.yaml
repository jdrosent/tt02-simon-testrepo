name: gds
# either manually started, or on a schedule
on: [ push, workflow_dispatch ]
permissions:
  contents: write
  pages: write
  id-token: write
jobs:
  gds:
    env:
        OPENLANE_IMAGE_NAME:  efabless/openlane:2022.10.20
        OPENLANE_ROOT:        /home/runner/openlane
        PDK_ROOT:             /home/runner/pdk
        PDK:                  sky130B

    # ubuntu
    runs-on: ubuntu-latest
    steps:
    # Need the repo checked out
    - name: Checkout repo
      uses: actions/checkout@v3

    # Need python
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - run: pip install requests PyYAML volare

    # Get pdk version
    - name: get pdk version
      run: echo "PDK_VER=$(docker run efabless/openlane:2022.10.20 python3 dependencies/tool.py open_pdks -f commit)" >> $GITHUB_ENV

    # Check for cached pdk
    - name: Check pdk cache
      id: cache-pdk
      uses: actions/cache@v3
      with:
        path: ${{ env.PDK_ROOT }}
        key: ${{ runner.os }}-pdk-${{ env.PDK_VER }}

    # Install PDK if not in cache
    - name: Install pdk
      if: ${{ steps.cache-pdk.outputs.cache-hit != 'true' }}
      run: volare enable --pdk sky130 $PDK_VER

    # Fetch the Verilog from Wokwi API
    - name: Fetch Verilog and build config
      run: ./configure.py --create-user-config

    # Run OpenLane to build the GDS
    - name: Make GDS
      run: >
        docker run --rm
        -v $PDK_ROOT:/pdk
        -v $(pwd):/work
        -e PDK_ROOT=/pdk
        -e PDK=$PDK
        -u $(id -u $USER):$(id -g $USER)
        $OPENLANE_IMAGE_NAME
        /bin/bash -c "./flow.tcl -verbose 2 -overwrite -design /work/src -run_path /work/runs -tag wokwi"

    - name: Add summary
      run: |
        git clone https://github.com/TinyTapeout/sssummarizer
        sssummarizer/sssummarizer.py --gl runs/wokwi/results/final/verilog/gl/fraserbc_simon.v --print-category >> $GITHUB_STEP_SUMMARY

    - name: Copy primitives to working directory
      run: cp -r ${{ env.PDK_ROOT }}/${{ env.PDK }}/libs.ref/sky130_fd_sc_hd/verilog/ primitives/

    - name: Cache pdk primitives
      uses: actions/cache@v3
      with:
        path: primitives
        key: ${{ runner.os }}-primitives-${{ env.PDK_VER }}

    - name: Populate src cache
      uses: actions/cache@v3
      with:
        path: src
        key: ${{ runner.os }}-src-${{ github.run_id }}

    - name: Populate runs cache
      uses: actions/cache@v3
      with:
        path: runs
        key: ${{ runner.os }}-runs-${{ github.run_id }}
    
    outputs:
      PDK_VER: ${{ env.PDK_VER }}

  gl_test:
    needs: gds
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    # Install oss fpga tools
    - name: Install oss-cad-suite
      uses: YosysHQ/setup-oss-cad-suite@v1

    # Restore runs
    - name: Restore runs cache
      uses: actions/cache@v3
      with:
        path: runs
        key: ${{ runner.os }}-runs-${{ github.run_id }}

    # Restore primitives
    - name: Restore primitives cache
      uses: actions/cache@v3
      with:
        path: primitives
        key: ${{ runner.os }}-primitives-${{ needs.gds.outputs.PDK_VER }}

    # Run testbench
    - name: Run gate-level test
      run: |
        cd src
        ln -s ../runs/ runs
        ln -s ../primitives/ primitives
        python simon.py -r
        GL=true make -L
        ! grep failure results.xml

  svg:
    needs: gds
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Restore runs cache
      uses: actions/cache@v3
      with:
        path: runs
        key: ${{ runner.os }}-runs-${{ github.run_id }}

    - name: Create svg
      run: |
        python -m pip install gdstk
        python << EOF
        import gdstk
        import pathlib

        gds = sorted(pathlib.Path('runs').glob('wokwi/results/final/gds/*.gds'))
        library = gdstk.read_gds(gds[-1])
        [library.cells[x].remove(*library.cells[x].labels) for x in range(len(library.cells))]
        top_cells = library.top_level()
        top_cells[0].write_svg('gds_render.svg')
        EOF

    - name: Populate svg cache
      uses: actions/cache@v3
      with:
        path: 'gds_render.svg'
        key: ${{ runner.os }}-svg-${{ github.run_id }}

  viewer:
    needs: gds
    runs-on: ubuntu-latest
    steps:
    - name: Checkout GDS2glTF repo
      uses: actions/checkout@v3
      with:
        repository: mbalestrini/GDS2glTF

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Restore runs cache
      uses: actions/cache@v3
      with:
        path: runs
        key: ${{ runner.os }}-runs-${{ github.run_id }}

    - name: gds2gltf
      run: |
        python -m pip install numpy gdspy triangle pygltflib
        cp runs/wokwi/results/final/gds/*.gds tinytapeout.gds
        python3 gds2gltf.py tinytapeout.gds

    - name: Populate viewer cache
      uses: actions/cache@v3
      with:
        path: 'tinytapeout.gds.gltf'
        key: ${{ runner.os }}-viewer-${{ github.run_id }}

  artifact:
    needs:
    - gds
    runs-on: ubuntu-latest
    steps:
    - name: Restore src cache
      uses: actions/cache@v3
      with:
        path: src
        key: ${{ runner.os }}-src-${{ github.run_id }}

    - name: Restore runs cache
      uses: actions/cache@v3
      with:
        path: runs
        key: ${{ runner.os }}-runs-${{ github.run_id }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
          # path depends on the tag and the module name
          name: GDS
          path: |
            src/*
            runs/wokwi/results/final/*
            runs/wokwi/reports/metrics.csv
            runs/wokwi/reports/synthesis/1-synthesis.AREA 0.stat.rpt

  pages:
    needs:
    - svg
    - viewer
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: restore svg cache
      uses: actions/cache@v3
      with:
        path: 'gds_render.svg'
        key: ${{ runner.os }}-svg-${{ github.run_id }}
    - name: restore viewer cache
      uses: actions/cache@v3
      with:
        path: 'tinytapeout.gds.gltf'
        key: ${{ runner.os }}-viewer-${{ github.run_id }}
    - name: generate redirect to viewer
      run: |
        cat << EOF >> index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting to GDS Viewer...</title>
          </head>
          <body>
            <script>
              location.href = "https://gds-viewer.tinytapeout.com/?model=" + encodeURIComponent(location.href + '/tinytapeout.gds.gltf');
            </script>
          </body>
          </html>
        EOF
    - name: Setup Pages
      uses: actions/configure-pages@v2
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: '.'
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1.2.2

  preview:
    needs: pages
    runs-on: ubuntu-latest
    steps:
    - name: Add gds preview
      run: |
        PAGE_URL=${{ needs.pages.outputs.page_url }}
        PAGE_URL=$(echo "$PAGE_URL" | sed -e 's/\/$//')
        cat << EOF >> $GITHUB_STEP_SUMMARY
        # layout
        ![svg]($PAGE_URL/gds_render.svg)
        # viewer
        [open preview](https://gds-viewer.tinytapeout.com/?model=$PAGE_URL/tinytapeout.gds.gltf)
        EOF
